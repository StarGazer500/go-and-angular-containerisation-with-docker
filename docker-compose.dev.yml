version: '3.8'

services:

  db:
    image: postgis/postgis
    ports:
      - "5432:5432"
    volumes:
      - posgresdata:/var/lib/postgresql/data
      - ./backend/init_extension.sql:/docker-entrypoint-initdb.d/init_extension.sql
      
    env_file:
      - ./backend/.env
    # environment:
    #   POSTGRES_DB: ${DB_NAME}
    #   POSTGRES_USER: ${DB_USER}
    #   POSTGRES_PASSWORD: ${DB_PASSWORD}

    # ports:
      # - "${DB_PORT}:${DB_PORT}"

    restart: always
  
  initialdbsetup:
    build:
      context: ./initialdbsetup
      dockerfile: ./dbmigrate_dockerfiles/Dockerfile.dev
    env_file:
      - ./initialdbsetup/.env
    # volumes:
      # - media:/app/fire_outbreak_project/fire_outbreak_project/media
      # - staticfiles:/app/fire_outbreak_project/fire_outbreak_project/staticfiles
    ports:
      - 8000:8000
    restart: unless-stopped
    depends_on:
      - db
    
    
  backend:
    build:
      context: ./backend
      dockerfile: ./go_dockerfiles/Dockerfile.dev
    env_file:
      - ./backend/.env
    # volumes:
      # - media:/app/fire_outbreak_project/fire_outbreak_project/media
      # - staticfiles:/app/fire_outbreak_project/fire_outbreak_project/staticfiles
    ports:
      - 8082:8082
    restart: unless-stopped
    depends_on:
      - db




  frontend:
    build:
      context: ./frontend
      dockerfile: ./angular_dockerfiles/Dockerfile.dev
    # volumes:
    #   - media:/app/fire_outbreak_project/fire_outbreak_project/media
    #   - staticfiles:/app/fire_outbreak_project/fire_outbreak_project/staticfiles
    #   # - react_build:/app/build
    depends_on:
      - backend
    ports:
      - "80:80"
    
    # restart: 'no'

  # redis:
  #   image: redis:latest
  #   ports:
  #     - 6379:6379
  #   restart: unless-stopped


volumes:
  # staticfiles:
  # media:
  posgresdata:
  # react_build:
